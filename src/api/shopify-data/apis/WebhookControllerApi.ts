/* tslint:disable */
/* eslint-disable */
/**
 * fit-shopify-data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OrderInput,
  OrderOutput,
  ProductInput,
  ProductOutput,
} from '../models';
import {
    OrderInputFromJSON,
    OrderInputToJSON,
    OrderOutputFromJSON,
    OrderOutputToJSON,
    ProductInputFromJSON,
    ProductInputToJSON,
    ProductOutputFromJSON,
    ProductOutputToJSON,
} from '../models';

export interface CreateOrderRequest {
    fitToken: string;
    orderInput?: OrderInput;
}

export interface CreateProductRequest {
    fitToken: string;
    productInput?: ProductInput;
}

export interface UpdateOrderRequest {
    fitToken: string;
    orderInput?: OrderInput;
}

export interface UpdateProductRequest {
    fitToken: string;
    productInput?: ProductInput;
}

/**
 * 
 */
export class WebhookControllerApi extends runtime.BaseAPI {

    /**
     */
    async createOrderRaw(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderOutput>> {
        if (requestParameters.fitToken === null || requestParameters.fitToken === undefined) {
            throw new runtime.RequiredError('fitToken','Required parameter requestParameters.fitToken was null or undefined when calling createOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.fitToken !== undefined) {
            queryParameters['fit-token'] = requestParameters.fitToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/webhook/order-created`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderInputToJSON(requestParameters.orderInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderOutputFromJSON(jsonValue));
    }

    /**
     */
    async createOrder(requestParameters: CreateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderOutput> {
        const response = await this.createOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createProductRaw(requestParameters: CreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductOutput>> {
        if (requestParameters.fitToken === null || requestParameters.fitToken === undefined) {
            throw new runtime.RequiredError('fitToken','Required parameter requestParameters.fitToken was null or undefined when calling createProduct.');
        }

        const queryParameters: any = {};

        if (requestParameters.fitToken !== undefined) {
            queryParameters['fit-token'] = requestParameters.fitToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/webhook/product-created`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductInputToJSON(requestParameters.productInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductOutputFromJSON(jsonValue));
    }

    /**
     */
    async createProduct(requestParameters: CreateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductOutput> {
        const response = await this.createProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateOrderRaw(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderOutput>> {
        if (requestParameters.fitToken === null || requestParameters.fitToken === undefined) {
            throw new runtime.RequiredError('fitToken','Required parameter requestParameters.fitToken was null or undefined when calling updateOrder.');
        }

        const queryParameters: any = {};

        if (requestParameters.fitToken !== undefined) {
            queryParameters['fit-token'] = requestParameters.fitToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/webhook/order-updated`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderInputToJSON(requestParameters.orderInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderOutputFromJSON(jsonValue));
    }

    /**
     */
    async updateOrder(requestParameters: UpdateOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderOutput> {
        const response = await this.updateOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateProductRaw(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductOutput>> {
        if (requestParameters.fitToken === null || requestParameters.fitToken === undefined) {
            throw new runtime.RequiredError('fitToken','Required parameter requestParameters.fitToken was null or undefined when calling updateProduct.');
        }

        const queryParameters: any = {};

        if (requestParameters.fitToken !== undefined) {
            queryParameters['fit-token'] = requestParameters.fitToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/webhook/product-updated`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductInputToJSON(requestParameters.productInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductOutputFromJSON(jsonValue));
    }

    /**
     */
    async updateProduct(requestParameters: UpdateProductRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductOutput> {
        const response = await this.updateProductRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
